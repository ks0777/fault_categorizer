- id: CFI_1,
  name: Control Flow Integrity,
  shortDescription:
    text: Violation of control-flow integrity possible
  fullDescription:
    text: Lorem ipsum dolir sit amet consetutor
  help: 
    text: ""
    markdown: |
      # Control Flow Integrity
      ## Fault Description
      The faulted instruction is a function call. The fault causes the execution of the function to be fully skipped without causing any side effects.

      ## Mitigation
      Harden this code by implementing a global counter that is saved locally and increased before each function call that should be protected. Every return instruction in that function needs to decrease that counter again before being executed. After the control flow has returned from the protected function the saved counter value is compared to the current value of the global counter and safely checked for equality. If this check fails, a panic needs to be triggered.

      ## Implementation
      Use the `FIH_CALL(f, ret, ...)` macro from the hardening header file to call the function and use the `FIH_RET(ret)` macro inside that function to return from it.

- id: CFI_2,
  name: Control Flow Integrity,
  shortDescription:
    text: Violation of control-flow integrity possible
  fullDescription:
    text: Lorem ipsum dolir sit amet consetutor
  help: 
    text: ""
    markdown: |
      # Control Flow Integrity
      ## Fault Description
      The faulted instruction is a function return at the end of a function. The fault causes the execution of instructions that follow the return statetment reaching a completely unrelated function that happens to be located right after the skipped return instruction in memory.

      ## Mitigation
      An obvious solution to this problem would be the duplication of the return instruction. However, this is only easily realized if the source code is written in Assembly. Achieving this in a high-level language is possible but highly-dependent on the compiler and its configuration. An example for such a solution is provided in the hardening Macros. 
      A simple solution to this problem could be to reorder the functions in the source code while hoping that the compiler respects this order. However, if this reordering is not done carefully it might just cause the problem to reoccur in a different place. Another option would be to introduce a dummy function in between those functions. Both of the options, however are subject to the compiler and how it decides to order the function.

      ## Implementation
      The `FIH_RET_3(ret)` macro might be able to mitigate the vulnerability (Use the `FIH_RET_2(ret)` macro if the function is already secured with the `FIH_CALL` macro). It uses a volatile variable to decide whether to execute the return statement or not. The condition for this is always true but it prevents the compiler from eliminating the code after the return statement which is followed by a call to the panic function. The compiler is also advised to construct the if-then such that the panic call follows the body of the construct. Depending on the optimization level and specific compiler and version this might however not happen. 
      Alternatively the `FIH_FUNCTION_BARRIER` macro can be used between the two affected functions which will add a dummy function that causes a panic when called. This function acts as a barrier between the two function and prevent the attack if the compiler respects the given order of the functions.

- id: CFI_3,
  name: Control Flow Integrity,
  shortDescription:
    text: Violation of control-flow integrity possible
  fullDescription:
    text: Lorem ipsum dolir sit amet consetutor
  help: 
    text: ""
    markdown: |
      # Control Flow Integrity
      ## Fault Description
      The faulted instruction is a function return in the middle of a a function. The fault causes the execution of instructions that follow the return statement which may allow an attacker to reach other parts of the current function.

      ## Mitigation
      An obvious solution to this problem would be the duplication of the return instruction. However, this is only easily realized if the source code is written in Assembly. Achieving this in a high-level language is possible but highly-dependent on the compiler and its configuration. An example for such a solution is provided in the hardening Macros. An alternative would be to secure the whole function by implementing a global counter that is saved locally and increased before the function is called. Every return instruction in the function needs to decrease that counter again before being executed. After the control flow has returned from the protected function the saved counter value is compared to the current value of the global counter and safely checked for equality. If this check fails, a panic needs to be triggered.
      Eventually the same, or another, return statement inside the function will be called which will again decrease the counter. In that case the counter would be decremented twice and a panic would be triggered after that function returns.

      ## Implementation
      Use the `FIH_CALL(f, ret, ...)` macro from the hardening header file for each call of the function and use the `FIH_RET(ret)` macro to return from it.
      To detect the fault earlier than after the return from the current function, the `FIH_RET_2(ret)` macro might be helpful. It uses a volatile variable to decide whether to execute the return statement or not. The condition for this is always true but it prevents the compiler from eliminating the code after the return statement which is followed by a call to the panic function. The compiler is also advised to construct the if-then such that the panic call follows the body of the construct. Depending on the optimization level and specific compiler and version this might however not happen.

- id: CFI_4,
  name: Control Flow Integrity,
  shortDescription:
    text: Violation of control-flow integrity possible
  fullDescription:
    text: Lorem ipsum dolir sit amet consetutor
  help: 
    text: ""
    markdown: |
      # Control Flow Integrity
      ## Fault Description
      The faulted instruction is an uncodtional branch at the end of a function. The fault causes the execution of instructions that follow the branch instruction reaching a completely unrelated function that happens to be located right after the current function in memory.

      ## Mitigation
      An obvious solution to this problem would be the duplication of the branch instruction. However, this is only easily realized if the source code is written in Assembly. Achieving this in a high-level language is generally not possible. A branch instruction at the end of a function is likely the result of heavy optimizations and consequently not easily controllable in the source code.
      A simple solution to this problem could be to reorder the functions in the source code while hoping that the compiler respects this order. However, if this reordering is not done carefully it might just cause the problem to reoccur in a different place. Another option would be to introduce a dummy function in between those functions. Both of the options, however are subject to the compiler and how it decides to order the function.

      ## Implementation
      To harden this code either try to reorder the functions in the source code or use the `FIH_FUNCTION_BARRIER` macro which generates a function that acts as a barrier between the two affected functions. It is a simple dummy function that triggers a panic when called. However, this mitigation only works if the compiler respects the given order of the functions.

- id: LI_1,
  name: Control Flow Integrity,
  shortDescription:
    text: Violation of loop integrity possible
  fullDescription:
    text: Lorem ipsum dolir sit amet consetutor
  help: 
    text: ""
    markdown: |
      # Control Flow Integrity
      ## Fault Description
      The faulted instruction is a conditional branch that belongs to the logic of a loop. The fault may allow an attacker to:
        - break from loop body early
        - execute an additional iteration of the loop body 
      regardless of the exit condition.

      ## Mitigation
    Harden this code either by adding redundancy to the loop condition or by adding a check behind the loop which confirms that the loop exit condition is met. The first option might be required to secure the loop against other faults where the branch instruction is only directed indirectly through a fault in the condition check. However, this mitigation needs to be implemented carefully to be effective. Adding redundancy to the loop condition can simply be done by duplicating the condition and concatenating them with an *and* operator. Ideally the compiler will now generate something like this:
      ```
      li      a3,9
      li      a4,9
      blt     a3,a5,80000140 <loop_body>
      lw      a5,12(sp)
      sext.w  a5,a5
      blt     a4,a5,80000140 <loop_body>
      ```
      In this example the loop will exit exactly iff the condition is met even if one of the conditional branches is skipped. The compiler does however not always generate such convenient constructs. It is hence recommended to add an additional check of the loop condition after the loop. Securing the condition with redundancy is however likely needed to secure the loop against fault attacks on the condition check itself. A well secured loop thus has both redundancy of the check and inside of the check itself.

      ## Implementation
      Add a check after the loop that verifies that the loop condition is met and trigger a panic if it is not. Alternatively add redundancy to the loop condition (e.g. through one of the `FIH_EQ`, `FIH_NOT_EQ`, `FIH_LT`, `FIH_GT`, `FIH_LTE`, `FIH_GTE` macros) and verify that the compiler builds the loop in a way that is secure against skipping branches. Using compiler annotations such as __builtin_expect might help to steer the compiler in the right direction however this approach is rather unreliable.
